/*
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.modeler.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.inject.Inject
import com.laegler.microservice.modeler.architectureLang.Architecture
import com.laegler.microservice.modeler.architectureLang.Spring
import java.io.FileReader
//import org.apache.maven.model.io.xpp3.MavenXpp3Reader

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ArchitectureLangGenerator extends AbstractGenerator {

	@Inject
	extension Transformator transformator

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource?.contents.head as Architecture

		model?.artifacts?.filter(Spring).forEach [
			fsa.generateFile(it?.name + '-structure.txt', it?.deploymentList)
		]

		fsa?.generateFile('component-diagram.plantuml', model?.plantumlComponentDiagram)

		fsa?.generateFile('component-diagram.dot', model?.dotComponentDiagram)
	}
	
//	def Model scanMavenProjects(Resource resource) {
//		resource.URI
//		
//		val MavenXpp3Reader mavenreader = new MavenXpp3Reader();
//		val Model model = mavenreader.read(new FileReader(pomXml));
//	}
}
