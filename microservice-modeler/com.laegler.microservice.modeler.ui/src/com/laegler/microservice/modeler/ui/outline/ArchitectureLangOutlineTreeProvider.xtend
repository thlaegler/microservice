/*
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.modeler.ui.outline

import com.google.inject.Inject
import com.laegler.microservice.model.microserviceModel.Architecture
import com.laegler.microservice.model.microserviceModel.GrpcConsume
import com.laegler.microservice.model.microserviceModel.GrpcExpose
import com.laegler.microservice.model.microserviceModel.Jar
import com.laegler.microservice.model.microserviceModel.RestConsume
import com.laegler.microservice.model.microserviceModel.RestExpose
import com.laegler.microservice.model.microserviceModel.Spring
import com.laegler.microservice.model.microserviceModel.SpringType
import com.laegler.microservice.model.microserviceModel.Dependency
import org.eclipse.emf.ecore.EObject
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class ArchitectureLangOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Inject
	var IImageHelper imageHelper

	override Object _text(Object modelElement) {
		var Object text = super._text(modelElement)
		if (text == null) {
			text = (modelElement as EObject).eResource().getURI().trimFileExtension().lastSegment();
		}

		if (modelElement instanceof Architecture) {
			return 'Architecture: ' + text
		} else if (modelElement instanceof Spring) {
			if (modelElement.type.equals(SpringType.DAEMON)) {
				return 'Daemon: ' + text
			} else {
				return 'Service: ' + text
			}
		} else if (modelElement instanceof Jar) {
			return 'Jar: ' + text
		} else if (modelElement instanceof Dependency) {
			return 'Dependency: ' + text
		} else if (modelElement instanceof GrpcExpose) {
			return 'gRPC expose: ' + text
		} else if (modelElement instanceof RestExpose) {
			return 'REST expose: ' + text
		} else if (modelElement instanceof GrpcConsume) {
			return 'gRPC consume: ' + text
		} else if (modelElement instanceof RestConsume) {
			return 'REST consume: ' + text
		}
		return text;
	}

	override Image _image(Object modelElement) {
		if (modelElement instanceof Architecture || modelElement instanceof Jar || modelElement instanceof GrpcExpose ||
			modelElement instanceof RestExpose || modelElement instanceof GrpcConsume ||
			modelElement instanceof RestConsume || modelElement instanceof Dependency) {
			return imageHelper.getImage((modelElement as EObject).eClass().getName() + '.gif')
		} else if (modelElement instanceof Spring) {
			if (modelElement.type.equals(SpringType.DAEMON)) {
				return imageHelper.getImage('Daemon.gif')
			} else {
				return imageHelper.getImage('Service.gif');
			}
		}
		return super._image(modelElement)
	}
}
