/*
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.adapter.lib.architectureLang;

import java.io.IOException;
import java.util.List;

import javax.inject.Named;

import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.laegler.microservice.editor.ArchitectureLangStandaloneSetup;
import com.laegler.microservice.model.microserviceModel.Architecture;
import com.laegler.microservice.model.microserviceModel.Artifact;

@Named
public class ArchitectureLangAdapter {

  public static void main(String[] args) {
    if (args.length == 0) {
      System.err.println("Aborting: no path to EMF resource provided!");
      return;
    }
    injector = new ArchitectureLangStandaloneSetup().createInjectorAndDoEMFRegistration();
    ArchitectureLangAdapter main = injector.getInstance(ArchitectureLangAdapter.class);
    main.runGenerator(args[0]);
  }

  @Inject
  private Provider<ResourceSet> resourceSetProvider;

  @Inject
  private IResourceValidator validator;

  @Inject
  private GeneratorDelegate generator;

  @Inject
  private JavaIoFileSystemAccess fileAccess;

  protected void runGenerator(String string) {
    // Load the resource
    ResourceSet set = resourceSetProvider.get();
    Resource resource = set.getResource(URI.createFileURI(string), true);

    // Validate the resource
    List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
    if (!list.isEmpty()) {
      for (Issue issue : list) {
        System.err.println(issue);
      }
      return;
    }

    // Configure and start the generator
    fileAccess.setOutputPath("/");
    GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    generator.generate(resource, fileAccess, context);

    System.out.println("Code generation finished.");
  }

  private static Injector injector;

  public static Architecture getArchitecture(String architectureFile) {
    injector = new ArchitectureLangStandaloneSetup().createInjectorAndDoEMFRegistration();
    ArchitectureLangAdapter main = injector.getInstance(ArchitectureLangAdapter.class);
    return main.parse2(architectureFile);
  }

  private Architecture parse(String architectureFile) {
    ResourceSet set = resourceSetProvider.get();
    Resource resource = set.getResource(URI.createFileURI(architectureFile), true);

    // Validate the resource
    List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
    if (!list.isEmpty()) {
      for (Issue issue : list) {
        System.err.println(issue);
      }
    }

    return (Architecture) resource.getContents().get(0);
  }

  private Architecture parse2(String architectureFile) {
    ResourceSet rs = resourceSetProvider.get();
    Resource resource = rs.getResource(URI.createFileURI(architectureFile), true);
    // Resource resource = rs.createResource(URI.createURI("dummy." +
    // injector.getInstance(FileExtensionProvider.class).getPrimaryFileExtension()));

    // Validate the resource
    List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
    if (!list.isEmpty()) {
      for (Issue issue : list) {
        System.err.println(issue);
      }
      return null;
    }

    try {
      resource.load(new StringInputStream(architectureFile), null);
      if (resource.getErrors().isEmpty()) {
        // validation
        EObject model = resource.getContents().get(0);
        Diagnostic diagnostic = Diagnostician.INSTANCE.validate(model);
        if (Diagnostic.ERROR == diagnostic.getSeverity()) {
          // TODO better error handling
          for (Diagnostic d : diagnostic.getChildren()) {
            System.err.println(d.getMessage());
          }
          return null;
        }
        // work with model
        if (model instanceof Architecture) {
          for (Artifact g : ((Architecture) model).getArtifacts()) {
            System.out.println("Found: " + g.getName());
          }
          return (Architecture) model;
        }

      } else {
        // TODO better error handling
        for (org.eclipse.emf.ecore.resource.Resource.Diagnostic error : resource.getErrors()) {
          System.err.println("Found Error: " + error.getMessage());
        }
      }
    } catch (IOException e1) {
      System.err.println("Exception while parsing: " + e1.getMessage());
    }
    return null;
  }
}

