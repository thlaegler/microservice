/*
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.modeler.yaml.formatting2

import com.google.inject.Inject
import microserviceModel.Artifact
import microserviceModel.Consume
import microserviceModel.Expose
import microserviceModel.Spring
import microserviceModel.Dependency
import com.laegler.microservice.modeler.yaml.services.ArchitectureYamlGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import microserviceModel.Architecture

class ArchitectureYamlFormatter extends AbstractFormatter2 {
	
	@Inject extension ArchitectureYamlGrammarAccess

	def dispatch void format(Architecture architecture, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Artifact artifact : architecture.artifacts) {
			artifact.format;
		}
	}

	def dispatch void format(Spring spring, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expose expose : spring.getExposes()) {
			expose.format;
		}
		for (Consume consume : spring.getConsumes()) {
			consume.format;
		}
		for (Dependency dependency : spring.dependencies) {
			dependency.format;
		}
	}
	
	// TODO: implement for RestExpose, YamlNode
}
