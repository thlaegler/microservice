// automatically generated by Xtext
grammar com.laegler.microservice.modeler.yaml.ArchitectureYaml with org.eclipse.xtext.common.Terminals

//import "http://www.laegler.com/microservice/MicroserviceModel" as mm
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate architectureYaml "http://www.laegler.com/microservice/modeler/ArchitectureYaml"

Architecture:
	'architecture:' name=ID NEWLINE
		WS 'package:' packageName=STRING NEWLINE
		WS (yamls+=Yaml)*
;
Yaml:
	'yaml:'
//	type=YamlType
	(
		('file' yamlFile=STRING)
		| ('node' NEWLINE WS yamlRoot=YamlNode)
		| ('inline' yamlInline=STRING)
	)
	NEWLINE
;
YamlFile:
	'yaml:' ('file' yamlFile=WorkspaceFile)
;
YamlRoot:
	'yaml:' ('node' NEWLINE WS yamlRoot=YamlNode)
;
YamlInline:
	'yaml:' ('inline' yamlInline=STRING)
;
enum YamlType:
	FILE='file' | NODE='node' | INLINE='inline'
;

WorkspaceFile:
	location=STRING
;
YamlNode:
	name=ID (':') value=YAML_PROPERTY_VALUE
	(
		nodes+=YamlNode
	)*
;
//Artifact:
//	Spring | Jar | Gateway;
//
//Expose:
//	RestExpose | GrpcExpose;
//
//Consume:
//	RestConsume | GrpcConsume;
//
//Spring:
//	type=SpringType
//	name=ID
//	'{'
//		('description' description=STRING)?
//		('exposes' '{' exposes+=Expose ( "," exposes+=Expose)* '}' )?
//		('consumes' '{' consumes+=Consume ( "," consumes+=Consume)* '}' )?
//		('uses' '{' uses+=Usage ( "," uses+=Usage)* '}' )?
//	'}';
//
//Jar:
//	'Jar'
//	name=ID
//	'{'
//		('description' description=STRING)?
//	'}';
//
//Gateway:
//	'Gateway'
//	name=ID
//	'{'
//		('description' description=STRING)?
//		('urlmatcher' urlmatcher=STRING)?
//		('targetService' targetService=[Spring|ID])?
//	'}';
//
//enum SpringType:
//	DAEMON = 'daemon'
//	| SERVICE = 'service'
//;
//
//Usage:
//	{Usage}
//	'Usage'
//	'{'
//		('dependencyName' dependencyName=STRING)?
//		('dependencyTarget' dependencyTarget=[Jar|ID])?
//	'}';

//
//RestExpose:
//	(draft?='draft')?
//	'rest'
//	name=ID
//	'{'
//		('description' description=STRING)?
//		('port' port=INT)?
//		('endpoint' endpoint=STRING)?
//		('swagger ' (('yamlFile' workspaceFile=WorkspaceFile) | ('yaml {{{' yamlRoot=YamlNode '}}}') | ('inline' yamlInline=STRING)))?
//	'}';
//WorkspaceFile:
//	location=STRING
//;
//YamlNode:
//	name=ID (': ') value=YAML_PROPERTY_VALUE NEWLINE
//	(
//		WS
//		nodes+=YamlNode
//		NEWLINE
//	)*
//;
//
//GrpcExpose:
//	(draft?='draft')?
//	'grpc'
//	name=ID
//	'{'
//		('description' description=STRING)?
//	'}';
//
//RestConsume:
//	{RestConsume}
//	'rest'
//	'{'
//		('description' description=STRING)?
//		('target' target=[RestExpose|ID])?
//	'}';
//
//GrpcConsume:
//	{GrpcConsume}
//	'grpc'
//	'{'
//		('description' description=STRING)?
//		('target' target=[GrpcExpose|ID])?
//	'}';

terminal YAML_PROPERTY_VALUE: !('\n' | '\r')* NEWLINE WS;

terminal WS:
    ('  ' | '\t')+;

terminal NEWLINE:
// New line on DOS or Unix 
    '\r'? '\n';

terminal ID:
    ('A'..'Z' | 'a'..'z') ('A'..'Z' | 'a'..'z' | '_' | '-' | '0'..'9')*;

terminal SL_COMMENT:
// Single line comment
    '#' !('\n' | '\r')*;
