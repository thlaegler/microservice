/**
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.model.microserviceModel.impl;

import com.laegler.microservice.model.microserviceModel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MicroserviceModelFactoryImpl extends EFactoryImpl implements MicroserviceModelFactory {
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MicroserviceModelFactory init() {
    try {
      MicroserviceModelFactory theMicroserviceModelFactory = (MicroserviceModelFactory)EPackage.Registry.INSTANCE.getEFactory(MicroserviceModelPackage.eNS_URI);
      if (theMicroserviceModelFactory != null) {
        return theMicroserviceModelFactory;
      }
    }
    catch (Exception exception) {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MicroserviceModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MicroserviceModelFactoryImpl() {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass) {
    switch (eClass.getClassifierID()) {
      case MicroserviceModelPackage.ARCHITECTURE: return createArchitecture();
      case MicroserviceModelPackage.ARTIFACT: return createArtifact();
      case MicroserviceModelPackage.SPRING: return createSpring();
      case MicroserviceModelPackage.GATEWAY: return createGateway();
      case MicroserviceModelPackage.ROUTE: return createRoute();
      case MicroserviceModelPackage.GRPC_JAR: return createGrpcJar();
      case MicroserviceModelPackage.JAR: return createJar();
      case MicroserviceModelPackage.OPTION: return createOption();
      case MicroserviceModelPackage.EXPOSE: return createExpose();
      case MicroserviceModelPackage.REST_EXPOSE: return createRestExpose();
      case MicroserviceModelPackage.GRPC_EXPOSE: return createGrpcExpose();
      case MicroserviceModelPackage.CONSUME: return createConsume();
      case MicroserviceModelPackage.REST_CONSUME: return createRestConsume();
      case MicroserviceModelPackage.GRPC_CONSUME: return createGrpcConsume();
      case MicroserviceModelPackage.DEPENDENCY: return createDependency();
      case MicroserviceModelPackage.ENTITY_MODEL: return createEntityModel();
      case MicroserviceModelPackage.ENTITY: return createEntity();
      case MicroserviceModelPackage.ENUMERATION: return createEnumeration();
      case MicroserviceModelPackage.ATTRIBUTE: return createAttribute();
      case MicroserviceModelPackage.RELATIONSHIP: return createRelationship();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue) {
    switch (eDataType.getClassifierID()) {
      case MicroserviceModelPackage.SPRING_TYPE:
        return createSpringTypeFromString(eDataType, initialValue);
      case MicroserviceModelPackage.BASE_TYPE_ENUM:
        return createBaseTypeEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue) {
    switch (eDataType.getClassifierID()) {
      case MicroserviceModelPackage.SPRING_TYPE:
        return convertSpringTypeToString(eDataType, instanceValue);
      case MicroserviceModelPackage.BASE_TYPE_ENUM:
        return convertBaseTypeEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Architecture createArchitecture() {
    ArchitectureImpl architecture = new ArchitectureImpl();
    return architecture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact createArtifact() {
    ArtifactImpl artifact = new ArtifactImpl();
    return artifact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Spring createSpring() {
    SpringImpl spring = new SpringImpl();
    return spring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gateway createGateway() {
    GatewayImpl gateway = new GatewayImpl();
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Route createRoute() {
    RouteImpl route = new RouteImpl();
    return route;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GrpcJar createGrpcJar() {
    GrpcJarImpl grpcJar = new GrpcJarImpl();
    return grpcJar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Jar createJar() {
    JarImpl jar = new JarImpl();
    return jar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption() {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expose createExpose() {
    ExposeImpl expose = new ExposeImpl();
    return expose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestExpose createRestExpose() {
    RestExposeImpl restExpose = new RestExposeImpl();
    return restExpose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GrpcExpose createGrpcExpose() {
    GrpcExposeImpl grpcExpose = new GrpcExposeImpl();
    return grpcExpose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Consume createConsume() {
    ConsumeImpl consume = new ConsumeImpl();
    return consume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestConsume createRestConsume() {
    RestConsumeImpl restConsume = new RestConsumeImpl();
    return restConsume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GrpcConsume createGrpcConsume() {
    GrpcConsumeImpl grpcConsume = new GrpcConsumeImpl();
    return grpcConsume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependency() {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntityModel createEntityModel() {
    EntityModelImpl entityModel = new EntityModelImpl();
    return entityModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity() {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration() {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute() {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship() {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringType createSpringTypeFromString(EDataType eDataType, String initialValue) {
    SpringType result = SpringType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSpringTypeToString(EDataType eDataType, Object instanceValue) {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BaseTypeEnum createBaseTypeEnumFromString(EDataType eDataType, String initialValue) {
    BaseTypeEnum result = BaseTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBaseTypeEnumToString(EDataType eDataType, Object instanceValue) {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MicroserviceModelPackage getMicroserviceModelPackage() {
    return (MicroserviceModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MicroserviceModelPackage getPackage() {
    return MicroserviceModelPackage.eINSTANCE;
  }

} //MicroserviceModelFactoryImpl
