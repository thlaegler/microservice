/*
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.editor.formatting2

import com.google.inject.Inject
import com.laegler.microservice.editor.services.ArchitectureLangGrammarAccess
import com.laegler.microservice.model.microserviceModel.Architecture
import com.laegler.microservice.model.microserviceModel.Artifact
import com.laegler.microservice.model.microserviceModel.Consume
import com.laegler.microservice.model.microserviceModel.Dependency
import com.laegler.microservice.model.microserviceModel.Expose
import com.laegler.microservice.model.microserviceModel.Spring
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ArchitectureLangFormatter extends AbstractFormatter2 {
	
	@Inject extension ArchitectureLangGrammarAccess

	def dispatch void format(Architecture architecture, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Artifact artifact : architecture.getArtifacts()) {
			artifact.format;
		}
	}

	def dispatch void format(Spring spring, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expose expose : spring.getExposes()) {
			expose.format;
		}
		for (Consume consume : spring.getConsumes()) {
			consume.format;
		}
		for (Dependency dependency : spring.getDependencies()) {
			dependency.format;
		}
		spring.getModel.format;
	}
	
	// TODO: implement for Gateway, EntityModel, Entity
}
