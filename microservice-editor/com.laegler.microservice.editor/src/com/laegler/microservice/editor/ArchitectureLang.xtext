// automatically generated by Xtext
grammar com.laegler.microservice.editor.ArchitectureLang with org.eclipse.xtext.common.Terminals

//import "platform:/resource/com.laegler.microservice.editor/model/MicroserviceModel.ecore"
//import "platform:/resource/microservice-model/model/MicroserviceModel.ecore"
import "http://www.laegler.com/microservice/model/MicroserviceModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Architecture returns Architecture:
	{Architecture}
	'Architecture'
	name=EString
	'{'
		('basePackage' basePackage=EString)?
		('version' version=EString)?
		('artifacts' '{' artifacts+=Artifact ( "," artifacts+=Artifact)* '}' )?
	'}';

Artifact returns Artifact:
	Artifact_Impl | Spring | Gateway | GrpcJar | Jar | Option;

Expose returns Expose:
	Expose_Impl | RestExpose | GrpcExpose;

Consume returns Consume:
	Consume_Impl | RestConsume | GrpcConsume;












Artifact_Impl returns Artifact:
	{Artifact}
	'Artifact'
	name=EString;

EString returns ecore::EString:
	STRING | ID;

Spring returns Spring:
	{Spring}
	'Spring'
	name=EString
	'{'
		('type' type=SpringType)?
		('description' description=EString)?
		('exposes' '{' exposes+=Expose ( "," exposes+=Expose)* '}' )?
		('consumes' '{' consumes+=Consume ( "," consumes+=Consume)* '}' )?
		('dependencies' '{' dependencies+=Dependency ( "," dependencies+=Dependency)* '}' )?
		('model' model=EntityModel)?
	'}';

Gateway returns Gateway:
	{Gateway}
	'Gateway'
	name=EString
	'{'
		('description' description=EString)?
		('routes' '{' routes+=Route ( "," routes+=Route)* '}' )?
	'}';

GrpcJar returns GrpcJar:
	{GrpcJar}
	'GrpcJar'
	name=EString
	'{'
		('description' description=EString)?
		('protoInline' protoInline=EString)?
		('protoFile' protoFile=EString)?
	'}';

Jar returns Jar:
	{Jar}
	'Jar'
	name=EString
	'{'
		('description' description=EString)?
	'}';

Option returns Option:
	{Option}
	'Option'
	name=EString
	'{'
		('value' value=EString)?
		('flag' flag=EString)?
	'}';

enum SpringType returns SpringType:
				DAEMON = 'DAEMON' | SERVICE = 'SERVICE';

Expose_Impl returns Expose:
	{Expose}
	(draft?='draft')?
	'Expose'
	name=EString
	'{'
		('description' description=EString)?
		('port' port=EInt)?
	'}';

Consume_Impl returns Consume:
	{Consume}
	'Consume'
	'{'
		('description' description=EString)?
	'}';

Dependency returns Dependency:
	{Dependency}
	'Dependency'
	name=EString
	'{'
		('target' target=[Jar|EString])?
	'}';

EntityModel returns EntityModel:
	{EntityModel}
	'EntityModel'
	'{'
		('entities' '{' entities+=Entity ( "," entities+=Entity)* '}' )?
		('enumerations' '{' enumerations+=Enumeration ( "," enumerations+=Enumeration)* '}' )?
		('relationships' '{' relationships+=Relationship ( "," relationships+=Relationship)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

RestExpose returns RestExpose:
	{RestExpose}
	(draft?='draft')?
	'RestExpose'
	name=EString
	'{'
		('description' description=EString)?
		('port' port=EInt)?
		('endpoint' endpoint=EString)?
		('swaggerFile' swaggerFile=EString)?
	'}';

GrpcExpose returns GrpcExpose:
	{GrpcExpose}
	(draft?='draft')?
	'GrpcExpose'
	name=EString
	'{'
		('description' description=EString)?
		('port' port=EInt)?
		('protoInline' protoInline=EString)?
		('protoFile' protoFile=EString)?
	'}';

RestConsume returns RestConsume:
	{RestConsume}
	'RestConsume'
	'{'
		('description' description=EString)?
		('target' target=[RestExpose|EString])?
	'}';

GrpcConsume returns GrpcConsume:
	{GrpcConsume}
	'GrpcConsume'
	'{'
		('description' description=EString)?
		('target' target=[GrpcExpose|EString])?
	'}';

Entity returns Entity:
	{Entity}
	'Entity'
	name=EString
	'{'
		('label' label=EString)?
		('documentation' documentation=EString)?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

Enumeration returns Enumeration:
	{Enumeration}
	'Enumeration'
	name=EString
	'{'
		('label' label=EString)?
		('documentation' documentation=EString)?
		('enumValues' '{' enumValues+=EString ( "," enumValues+=EString)* '}' )?
	'}';

Relationship returns Relationship:
	{Relationship}
	'Relationship'
	name=EString
	'{'
		('label' label=EString)?
		('documentation' documentation=EString)?
		('from' from=[Entity|EString])?
		('to' to=[Entity|EString])?
	'}';

Attribute returns Attribute:
	{Attribute}
	(primaryKey?='primaryKey')?
	'Attribute'
	name=EString
	'{'
		('label' label=EString)?
		('documentation' documentation=EString)?
		('type' type=[Entity|EString])?
	'}';

Route returns Route:
	{Route}
	'Route'
	name=EString
	'{'
		('urlmatcher' urlmatcher=EString)?
		('targetService' targetService=[Spring|EString])?
	'}';
