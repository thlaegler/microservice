/**
 * generated by Xtext 2.12.0
 */
package microserviceModel.impl;

import microserviceModel.MicroserviceModelPackage;
import microserviceModel.Route;
import microserviceModel.Spring;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Route</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link microserviceModel.impl.RouteImpl#getName <em>Name</em>}</li>
 *   <li>{@link microserviceModel.impl.RouteImpl#getUrlmatcher <em>Urlmatcher</em>}</li>
 *   <li>{@link microserviceModel.impl.RouteImpl#getTargetService <em>Target Service</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RouteImpl extends MinimalEObjectImpl.Container implements Route {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #getUrlmatcher() <em>Urlmatcher</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getUrlmatcher()
	 * @generated
	 * @ordered
	 */
	protected static final String URLMATCHER_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getUrlmatcher() <em>Urlmatcher</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getUrlmatcher()
	 * @generated
	 * @ordered
	 */
	protected String urlmatcher = URLMATCHER_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTargetService() <em>Target Service</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTargetService()
	 * @generated
	 * @ordered
	 */
	protected Spring targetService;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RouteImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MicroserviceModelPackage.Literals.ROUTE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.ROUTE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getUrlmatcher() {
		return urlmatcher;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setUrlmatcher(String newUrlmatcher) {
		String oldUrlmatcher = urlmatcher;
		urlmatcher = newUrlmatcher;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.ROUTE__URLMATCHER, oldUrlmatcher, urlmatcher));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Spring getTargetService() {
		if (targetService != null && targetService.eIsProxy()) {
			InternalEObject oldTargetService = (InternalEObject)targetService;
			targetService = (Spring)eResolveProxy(oldTargetService);
			if (targetService != oldTargetService) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, MicroserviceModelPackage.ROUTE__TARGET_SERVICE, oldTargetService, targetService));
			}
		}
		return targetService;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Spring basicGetTargetService() {
		return targetService;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTargetService(Spring newTargetService) {
		Spring oldTargetService = targetService;
		targetService = newTargetService;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.ROUTE__TARGET_SERVICE, oldTargetService, targetService));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MicroserviceModelPackage.ROUTE__NAME:
				return getName();
			case MicroserviceModelPackage.ROUTE__URLMATCHER:
				return getUrlmatcher();
			case MicroserviceModelPackage.ROUTE__TARGET_SERVICE:
				if (resolve) return getTargetService();
				return basicGetTargetService();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MicroserviceModelPackage.ROUTE__NAME:
				setName((String)newValue);
				return;
			case MicroserviceModelPackage.ROUTE__URLMATCHER:
				setUrlmatcher((String)newValue);
				return;
			case MicroserviceModelPackage.ROUTE__TARGET_SERVICE:
				setTargetService((Spring)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MicroserviceModelPackage.ROUTE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case MicroserviceModelPackage.ROUTE__URLMATCHER:
				setUrlmatcher(URLMATCHER_EDEFAULT);
				return;
			case MicroserviceModelPackage.ROUTE__TARGET_SERVICE:
				setTargetService((Spring)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MicroserviceModelPackage.ROUTE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case MicroserviceModelPackage.ROUTE__URLMATCHER:
				return URLMATCHER_EDEFAULT == null ? urlmatcher != null : !URLMATCHER_EDEFAULT.equals(urlmatcher);
			case MicroserviceModelPackage.ROUTE__TARGET_SERVICE:
				return targetService != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", urlmatcher: ");
		result.append(urlmatcher);
		result.append(')');
		return result.toString();
	}

} //RouteImpl
