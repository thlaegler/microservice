/**
 * generated by Xtext 2.12.0
 */
package com.laegler.microservice.model.microserviceModel.impl;

import com.laegler.microservice.model.microserviceModel.Consume;
import com.laegler.microservice.model.microserviceModel.Dependency;
import com.laegler.microservice.model.microserviceModel.EntityModel;
import com.laegler.microservice.model.microserviceModel.Expose;
import com.laegler.microservice.model.microserviceModel.MicroserviceModelPackage;
import com.laegler.microservice.model.microserviceModel.Spring;
import com.laegler.microservice.model.microserviceModel.SpringType;

import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Spring</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getExposes <em>Exposes</em>}</li>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getConsumes <em>Consumes</em>}</li>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getDependencies <em>Dependencies</em>}</li>
 *   <li>{@link com.laegler.microservice.model.microserviceModel.impl.SpringImpl#getModel <em>Model</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpringImpl extends ArtifactImpl implements Spring {
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final SpringType TYPE_EDEFAULT = SpringType.DAEMON;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected SpringType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getExposes() <em>Exposes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExposes()
   * @generated
   * @ordered
   */
  protected EList<Expose> exposes;

  /**
   * The cached value of the '{@link #getConsumes() <em>Consumes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsumes()
   * @generated
   * @ordered
   */
  protected EList<Consume> consumes;

  /**
   * The cached value of the '{@link #getDependencies() <em>Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependencies()
   * @generated
   * @ordered
   */
  protected EList<Dependency> dependencies;

  /**
   * The cached value of the '{@link #getModel() <em>Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected EntityModel model;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpringImpl() {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass() {
    return MicroserviceModelPackage.Literals.SPRING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringType getType() {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(SpringType newType) {
    SpringType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.SPRING__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDescription() {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDescription(String newDescription) {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.SPRING__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<Expose> getExposes() {
    if (exposes == null) {
      exposes = new EObjectContainmentEList<Expose>(Expose.class, this, MicroserviceModelPackage.SPRING__EXPOSES);
    }
    return exposes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<Consume> getConsumes() {
    if (consumes == null) {
      consumes = new EObjectContainmentEList<Consume>(Consume.class, this, MicroserviceModelPackage.SPRING__CONSUMES);
    }
    return consumes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<Dependency> getDependencies() {
    if (dependencies == null) {
      dependencies = new EObjectContainmentEList<Dependency>(Dependency.class, this, MicroserviceModelPackage.SPRING__DEPENDENCIES);
    }
    return dependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntityModel getModel() {
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModel(EntityModel newModel, NotificationChain msgs) {
    EntityModel oldModel = model;
    model = newModel;
    if (eNotificationRequired()) {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.SPRING__MODEL, oldModel, newModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModel(EntityModel newModel) {
    if (newModel != model) {
      NotificationChain msgs = null;
      if (model != null)
        msgs = ((InternalEObject)model).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MicroserviceModelPackage.SPRING__MODEL, null, msgs);
      if (newModel != null)
        msgs = ((InternalEObject)newModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MicroserviceModelPackage.SPRING__MODEL, null, msgs);
      msgs = basicSetModel(newModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceModelPackage.SPRING__MODEL, newModel, newModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
    switch (featureID) {
      case MicroserviceModelPackage.SPRING__EXPOSES:
        return ((InternalEList<?>)getExposes()).basicRemove(otherEnd, msgs);
      case MicroserviceModelPackage.SPRING__CONSUMES:
        return ((InternalEList<?>)getConsumes()).basicRemove(otherEnd, msgs);
      case MicroserviceModelPackage.SPRING__DEPENDENCIES:
        return ((InternalEList<?>)getDependencies()).basicRemove(otherEnd, msgs);
      case MicroserviceModelPackage.SPRING__MODEL:
        return basicSetModel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType) {
    switch (featureID) {
      case MicroserviceModelPackage.SPRING__TYPE:
        return getType();
      case MicroserviceModelPackage.SPRING__DESCRIPTION:
        return getDescription();
      case MicroserviceModelPackage.SPRING__EXPOSES:
        return getExposes();
      case MicroserviceModelPackage.SPRING__CONSUMES:
        return getConsumes();
      case MicroserviceModelPackage.SPRING__DEPENDENCIES:
        return getDependencies();
      case MicroserviceModelPackage.SPRING__MODEL:
        return getModel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue) {
    switch (featureID) {
      case MicroserviceModelPackage.SPRING__TYPE:
        setType((SpringType)newValue);
        return;
      case MicroserviceModelPackage.SPRING__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case MicroserviceModelPackage.SPRING__EXPOSES:
        getExposes().clear();
        getExposes().addAll((Collection<? extends Expose>)newValue);
        return;
      case MicroserviceModelPackage.SPRING__CONSUMES:
        getConsumes().clear();
        getConsumes().addAll((Collection<? extends Consume>)newValue);
        return;
      case MicroserviceModelPackage.SPRING__DEPENDENCIES:
        getDependencies().clear();
        getDependencies().addAll((Collection<? extends Dependency>)newValue);
        return;
      case MicroserviceModelPackage.SPRING__MODEL:
        setModel((EntityModel)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID) {
    switch (featureID) {
      case MicroserviceModelPackage.SPRING__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MicroserviceModelPackage.SPRING__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case MicroserviceModelPackage.SPRING__EXPOSES:
        getExposes().clear();
        return;
      case MicroserviceModelPackage.SPRING__CONSUMES:
        getConsumes().clear();
        return;
      case MicroserviceModelPackage.SPRING__DEPENDENCIES:
        getDependencies().clear();
        return;
      case MicroserviceModelPackage.SPRING__MODEL:
        setModel((EntityModel)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID) {
    switch (featureID) {
      case MicroserviceModelPackage.SPRING__TYPE:
        return type != TYPE_EDEFAULT;
      case MicroserviceModelPackage.SPRING__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case MicroserviceModelPackage.SPRING__EXPOSES:
        return exposes != null && !exposes.isEmpty();
      case MicroserviceModelPackage.SPRING__CONSUMES:
        return consumes != null && !consumes.isEmpty();
      case MicroserviceModelPackage.SPRING__DEPENDENCIES:
        return dependencies != null && !dependencies.isEmpty();
      case MicroserviceModelPackage.SPRING__MODEL:
        return model != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString() {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //SpringImpl
